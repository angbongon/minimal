# -*- mode: python -*-
# -*- coding: utf-8 -*-

#
#			X.Org JHBuild Configuration File Sample
#
# Edit this sample file to match your settings and copy it to ~/.config/jhbuildrc
#
# This file comes from: http://cgit.freedesktop.org/xorg/util/modular/tree/jhbuildrc
# The modules file: http://cgit.freedesktop.org/xorg/util/modular/tree/xorg.modules
# JhBuild installation: https://developer.gnome.org/jhbuild/unstable/getting-started.html.en
# The specs for this file: https://developer.gnome.org/jhbuild/unstable/config-reference.html.en
# The build guide for X: http://www.x.org/wiki/Building_the_X_Window_System/

# A string or list of strings specifying the name(s) of the module set(s) to use.
# It can be a full HTTP URL to an externally managed moduleset
moduleset = os.path.join(os.environ['HOME'], 'xorg/util/modular/xorg.modules')

# A list of strings specifying the modules to build.
# The list of modules actually built will be recursively expanded to include all the dependencies
# Run 'jhbuild build' to build all of X
modules = [ 'The X Window System' ]

# A string specifying the directory to unpack source trees to.
checkoutroot = os.path.join(os.environ['HOME'])

# A string specifying the prefix to install modules to.
# The prefix must be an absolute path. This directory must be writable
prefix = os.path.join(os.environ['HOME'], 'xorg-build')

# The following is required to make aclocal find our .m4 macros
os.environ['ACLOCAL'] = 'aclocal -I ' + os.path.join(prefix, 'share/aclocal')

# The following is required to make pkg-config find our .pc metadata files
os.environ['PKG_CONFIG_PATH'] = os.path.join(prefix, 'lib/pkgconfig') \
    + ':' + os.path.join(prefix, 'share/pkgconfig')

# A boolean value that specifies whether to install libraries to lib64 directories.
# Defaults to 1 on Debian but now obsolete, using multi-arch nomenclature
use_lib64 = 0

# Extra configure options to pass to all autogen.sh scripts, e.g. --enable-xxx
# If commented out, the GNOME defaults are used which are not used in xorg
autogenargs=''

# custom CFLAGS / environment pieces for the build
# os.environ['CFLAGS'] = '-Wall -g -O0'

# A string listing additional arguments to be passed to make.
# Set makeargs to 'V=1' for verbose build output.
#makeargs = ''
